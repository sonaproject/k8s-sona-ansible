---
kind: ConfigMap
apiVersion: v1
metadata:
  name: onos-config
  namespace: kube-system
data:
  cluster.json: |-
    {
      "node": {
          "ip": "{{ master_ip }}",
          "id": "{{ master_ip }}",
          "port": 9876
      },
      "storage": [
          {
              "ip": "127.0.0.1",
              "id": "atomix-1",
              "port": 5679
          }
      ],
      "name": "onos"
    }
  component-cfg.json: |-
    {
      "org.onosproject.k8snode.impl.DefaultK8sNodeHandler": {
        "ovsdbPortNum": 6650
      }
    }

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: onos-probe-scripts
  namespace: kube-system
data:
  check-onos-status: |
    #!/bin/bash
    set -e
    config=$(curl -s http://localhost:8181/onos/v1/cluster/{{ master_ip }} --user onos:rocks)
    echo $config
    printf '%q' $config | grep -q "READY"

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: sona-probe-scripts
  namespace: kube-system
data:
  check-sona-status: |
    #!/bin/bash
    set -e
    
    while true
    do
      check_str='curl -sL --user onos:rocks -w "%{http_code}\\n" "http://localhost:8181/onos/k8snetworking/network/exist/1" -o /dev/null'
      if [ $(eval $check_str) == "200" ];
      then
        break
      else
        sleep 5s
      fi
    done

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: kube-config-scripts
  namespace: kube-system
data:
  convert-kube-config.py: |
    #!/usr/bin/env python
    
    import json, yaml, sys, getopt

    def main(argv):
       inputfile = ''
       outputfile = ''
       token = ''
       try:
          opts, args = getopt.getopt(argv,"ht:i:o:",["token","ifile=","ofile="])
       except getopt.GetoptError:
          print ('convert-kube-config.py -t <token> -i <inputfile> -o <outputfile>')
          sys.exit(2)

       for opt, arg in opts:
          if opt == '-h':
             print ('convert-kube-config.py -t <token> -i <inputfile> -o <outputfile>')
             sys.exit()
          elif opt in ("-i", "--ifile"):
             inputfile = arg
          elif opt in ("-o", "--ofile"):
             outputfile = arg
          elif opt in ("-t", "--token"):
             token = arg

       with open(inputfile, 'r') as stream:
          try:
             raw = yaml.safe_load(stream)
             clusters = raw["clusters"]
             cluster = clusters[0]["cluster"]
             ca_cert_data = cluster["certificate-authority-data"]
             server = cluster["server"]
             scheme = server.split(":")[0].upper()
             ip_address = server.split(":")[1].replace('//', '')
             port = server.split(":")[2]

             users = raw["users"]
             user = users[0]["user"]
             client_cert_data = user["client-certificate-data"]
             client_key_data = user["client-key-data"]

             api_configs = {
                "scheme": scheme,
                "ipAddress": ip_address,
                "port": int(port),
                "token": token,
                "caCertData": ca_cert_data,
                "clientCertData": client_cert_data,
                "clientKeyData": client_key_data
             }
             data = {
                "apiConfigs": [
                   api_configs
                ]
             }
          except yaml.YAMLError as exc:
             print(exc)

       with open(outputfile, "w") as jsonfile:
          json.dump(data, jsonfile)

    if __name__ == "__main__":
       main(sys.argv[1:])

---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: sona-onos
  namespace: kube-system
  labels:
    k8s-app: onos
spec:
  serviceName: sona-onos
  selector:
    matchLabels:
      k8s-app: onos
  replicas: 1
  template:
    metadata:
      name: sona-onos
      namespace: kube-system
      labels:
        k8s-app: onos
    spec:
      hostNetwork: true
      tolerations:
        - effect: NoSchedule
          key: node-role.kubernetes.io/master
      nodeSelector:
        node-role.kubernetes.io/master: ""

      # These containers are run during pod initialization
      initContainers:
      - name: onos-init
        image: busybox
        command: ["/bin/sh", "-c"] 
        args:
          - echo $CLUSTER_JSON > /tmp/cluster.json;
            cat /tmp/cluster.json;
            echo $COMPONENT_CONFIG_JSON > /tmp/component-cfg.json;
            cat /tmp/component-cfg.json;
            rm -rf /tmp/ready
        env:
          - name: CLUSTER_JSON
            valueFrom:
              configMapKeyRef:
                name: onos-config
                key: cluster.json
          - name: COMPONENT_CONFIG_JSON
            valueFrom:
              configMapKeyRef:
                name: onos-config
                key: component-cfg.json
        volumeMounts:
          - name: config
            mountPath: /tmp
            readOnly: false
      containers:
      - name: onos
        image: opensona/onos-sona-nightly-docker:k8s
        imagePullPolicy: Always
        env:
        - name: JAVA_OPTS
          value: -Xmx2G
        ports:
        - name: openflow
          containerPort: 6653
        - name: ovsdb
          containerPort: 6640
        - name: east-west
          containerPort: 9876
        - name: cli
          containerPort: 8101
        - name: ui
          containerPort: 8181
        readinessProbe:
          exec:
            command:
            - sh
            - -c
            - /root/onos/bin/check-onos-status
          initialDelaySeconds: 30
          periodSeconds: 15
          failureThreshold: 10
        livenessProbe:
          exec:
            command:
            - sh
            - -c
            - /root/onos/bin/check-onos-status
          initialDelaySeconds: 300
          periodSeconds: 15
          timeoutSeconds: 5
        volumeMounts:
          - name: probe-scripts
            mountPath: /root/onos/bin/check-onos-status
            subPath: check-onos-status
          - name: config
            mountPath: /root/onos/config
            readOnly: true
      volumes:
      - name: probe-scripts
        configMap:
          name: onos-probe-scripts
          defaultMode: 0744
      - name: config
        hostPath:
          path: /tmp/onos-config
          type: DirectoryOrCreate

---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: sona-onos-config
  namespace: kube-system
  labels:
    k8s-app: onos-config
spec:
  replicas: 1
  template:
    metadata:
      name: sona-onos-config
      namespace: kube-system
      labels:
        k8s-app: onos-config
    spec:
      hostNetwork: true
      tolerations:
        - effect: NoSchedule
          key: node-role.kubernetes.io/master
      nodeSelector:
        node-role.kubernetes.io/master: ""

      initContainers:
      - name: sona-readiness-probe
        image: opensona/python-docker
        command: ["/bin/sh", "-c"]
        args:
          - /tmp/check-sona-status ;
            sleep 30
        volumeMounts:
          - name: probe-scripts
            mountPath: /tmp/check-sona-status
            subPath: check-sona-status
      containers:
      - name: onos-config
        image: opensona/python-docker
        imagePullPolicy: Always
        command: ["/bin/sh", "-c"]
        args:
          - /root/onos/bin/convert-kube-config.py -i /root/onos/kube_admin.conf -o /tmp/onos_config.json -t {{ token }} ;
            curl --user onos:rocks -X POST -H "Content-Type:application/json" http://127.0.0.1:8181/onos/k8snode/configure/api -d @/tmp/onos_config.json ;
            sleep 5 ;
            curl -s --user onos:rocks -X GET http://127.0.0.1:8181/onos/k8snode/configure/init/all ;
            sleep 10 ;
            curl -s --user onos:rocks -X GET http://127.0.0.1:8181/onos/k8snode/configure/init/all ;
            sleep 10 ;
            curl -s --user onos:rocks -X GET http://127.0.0.1:8181/onos/k8snode/configure/init/all ;
            sleep 10 ;
            touch /tmp/ready ;
            while true ; do sleep 10 ; done
        volumeMounts:
          - name: config-scripts
            mountPath: /root/onos/bin/convert-kube-config.py
            subPath: convert-kube-config.py
          - name: kube-home
            mountPath: /root/onos/kube_admin.conf
            subPath: admin.conf
          - name: config
            mountPath: /tmp
            readOnly: false
      volumes:
        - name: config-scripts
          configMap:
            name: kube-config-scripts
            defaultMode: 0744
        - name: probe-scripts
          configMap:
            name: sona-probe-scripts
            defaultMode: 0744
        - name: config
          hostPath:
            path: /tmp/onos-config
        - name: kube-home
          hostPath:
            path: /etc/kubernetes/
